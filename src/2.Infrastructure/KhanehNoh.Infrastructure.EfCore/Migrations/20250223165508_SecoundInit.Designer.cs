// <auto-generated />
using System;
using KhanehNoh.Infrastructure.EfCore.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KhanehNoh.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250223165508_SecoundInit")]
    partial class SecoundInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExpertHomeService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("HomeServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "HomeServicesId");

                    b.HasIndex("HomeServicesId");

                    b.ToTable("ExpertHomeService");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 9,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندر عباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            PictureUrl = "",
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "ساختمان"
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.HomeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("HomeServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 1,
                            Title = "سرویس عادی نظافت"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 1,
                            Title = "نظافت راه پله"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 1,
                            Title = "پذیرایی"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 2,
                            Title = "قالی شویی"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 2,
                            Title = "پرده شویی"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 2,
                            Title = "خشک شویی"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 3,
                            Title = "سرامیک خودرو"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 3,
                            Title = "کارواش نانو"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 3,
                            Title = "کارواش با آب"
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "تعمیر و سرویس آبگرمکن"
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "تعمیر و نگه داری موتورخانه"
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "سرویس و تعمیر چیلر"
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "پمپ و منبع آب"
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "لوله کشی گاز"
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "نصب و تعمیر سینک ظرفشویی"
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 300000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "نصب لوستر و چراغ"
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 250000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "کلید و پریز"
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 150000.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "سیم کشی و کابل کشی"
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "کارواش ودیتیلینگ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 16, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "برقکاری"
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ارزون",
                            ExpertId = 1,
                            IsAccepted = false,
                            IsDeleted = false,
                            OfferStatus = 2,
                            Price = 5000m,
                            RegisterDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            DeliveryDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "گرون",
                            ExpertId = 1,
                            IsAccepted = false,
                            IsDeleted = false,
                            OfferStatus = 2,
                            Price = 6000m,
                            RegisterDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 2
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "بسیار خوب",
                            CustomerId = 1,
                            ExpertId = 1,
                            IsDeleted = false,
                            Rate = 5,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Comment = "عالی بود ",
                            CustomerId = 1,
                            ExpertId = 1,
                            IsDeleted = false,
                            Rate = 5,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HomeServiceId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CustomerId = 1,
                            Description = "نظافت راه پله 4طبقه ای",
                            EndTime = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeServiceId = 2,
                            IsDeleted = false,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 2,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "نظافت راه پله"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CustomerId = 1,
                            Description = "پذیرایی",
                            EndTime = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeServiceId = 3,
                            IsDeleted = false,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 2,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "پذیرایی"
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "test1",
                            Balance = 250000.0,
                            CityId = 1,
                            ConcurrencyStamp = "6285aafa-a906-4e4d-b035-a54f73d9dd0a",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            LastName = "Rashedi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN7878",
                            PasswordHash = "AQAAAAEAACcQAAAAENCu5aWJ8ffMX2faLtU/XUMl5+9pLyj5et+YudS0BQIxmZV7fSeNvm8WNzA/Qb+Iwg==",
                            PhoneNumber = "09036703412",
                            PhoneNumberConfirmed = false,
                            PictureUrl = "Url",
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "01325dee-6e2d-4668-9cae-3e1c9c8cef42",
                            TwoFactorEnabled = false,
                            UserName = "admin7878"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "test2",
                            Balance = 20000.0,
                            CityId = 1,
                            ConcurrencyStamp = "4d8110a0-d81c-4f02-a5ca-4b09115e9119",
                            Email = "Expert@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Reza",
                            LastName = "Sadeghi",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            NormalizedUserName = "REZA007",
                            PasswordHash = "AQAAAAEAACcQAAAAEGc4xKnxpcnpgMs2JO64a5kcpMiQ7N49NQr5d88cpzyDyzn4wXjccA6BIuAlXDqw0Q==",
                            PhoneNumber = "09165168696",
                            PhoneNumberConfirmed = false,
                            PictureUrl = "Url1",
                            RegisterDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "708b4ab8-b5c7-4c76-90b4-2a58cd06a2ba",
                            TwoFactorEnabled = false,
                            UserName = "reza007"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "test3",
                            Balance = 20000.0,
                            CityId = 1,
                            ConcurrencyStamp = "9503541c-9586-4d07-8ed1-0a5cea224efb",
                            Email = "arvin2013@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Arvin",
                            LastName = "Rashedi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARVIN2013@GMAIL.COM",
                            NormalizedUserName = "ARVIN2013",
                            PasswordHash = "AQAAAAEAACcQAAAAENC6Jafd/TY9elmsyE1FFtTOlRv/36Em5XECAo7GM/6HT8kUe6o+FY3QShnv0HVuOw==",
                            PhoneNumber = "09926448610",
                            PhoneNumberConfirmed = false,
                            PictureUrl = "Url2",
                            RegisterDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c07cfa38-3552-4977-b641-671c19940c1c",
                            TwoFactorEnabled = false,
                            UserName = "arvin2013"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "08fbebbf-19f4-4a83-8557-ffa79be217cb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "7ac9bb05-2795-49c3-ba10-9a04ff420892",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "4be6ac69-b085-482c-a0ba-c19d616eaf6c",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertHomeService", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Categories.HomeService", null)
                        .WithMany()
                        .HasForeignKey("HomeServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.HomeService", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Categories.SubCategory", "SubCategory")
                        .WithMany("HomeServices")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Categories.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Offer", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("Offers")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Orders.Request", "Request")
                        .WithMany("Offers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Rating", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("Ratings")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Request", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.BaseEntities.City", "City")
                        .WithMany("Requests")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Categories.HomeService", "HomeService")
                        .WithMany("Requests")
                        .HasForeignKey("HomeServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("HomeService");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Admin", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("KhanehNoh.Domain.Core.Entities.Users.Admin", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("KhanehNoh.Domain.Core.Entities.Users.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("KhanehNoh.Domain.Core.Entities.Users.Expert", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.User", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.BaseEntities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KhanehNoh.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.HomeService", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.Navigation("HomeServices");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Orders.Request", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KhanehNoh.Domain.Core.Entities.Users.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });
#pragma warning restore 612, 618
        }
    }
}
